import emoji
class LabirintTurtle:

    def __init__(self):
        self.map = []  # –∫–∞—Ä—Ç–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        self.work_map = []  # —Ä–∞–±–æ—á–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —á–∏—Å–µ–ª
        self.x = None  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–ø–∞—Ö–∏
        self.y = None

    def load_map(self, name):  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É
        file = open(name, 'r')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ
        lab = file.read().split('\n')  # –°—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –¥–µ–ª–∞–µ–º —Å–ø–ª–∏—Ç –ø–æ —Å–∏–º–≤–æ–ª—É –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
        file.close()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª

        self.x = lab.pop()  # –î–æ—Å—Ç–∞–µ–º –∏–∑ —Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–ø–∞—Ö–∏
        self.y = lab.pop()

        self.map = [list(line) for line in lab]  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é —Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤

        self.work_map = [list(map(int, list(line.replace('*', '1').replace(' ', '0')))) for line in lab]  #–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∏–º –º–∞—Å—Å–∏–≤ –∏–∑ 0 –∏ 1
    def check_map(self):
        if not self.check():  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã
            self.map = []  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.work_map = []
            self.x = None
            self.y = None
            print('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ä—Ç–∞')

    def check(self):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
        ext = 0  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞

        try:
            self.x = int(self.x)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            self.y = int(self.y)
        except ValueError:
            return False

        for line in self.map:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ "*" –∏ " "
            for symbol in line:
                if not symbol in ['*', ' ']:
                    return False

            ext += int(line[0] == ' ') + int(line[-1] == ' ')  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–æ–∫–æ–≤—ã—Ö –≤—ã—Ö–æ–¥–æ–≤

        ext += self.map[0].count(' ') + self.map[-1].count(' ')  # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤
        if ext == 0:  # –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–æ–≤ –Ω–µ—Ç
            return False

        if self.map[self.x][self.y] != ' ':  # –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–ø–∞—Ö–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å–æ —Å—Ç–µ–Ω–æ–π
            return False

        self.voln(self.x, self.y, 1)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—É–ø–∏–∫–æ–≤
        ex,ey = self.get_exit_coord()
        if self.work_map[ex][ey] == 0:
            return False

        return True

    def show_map(self, turtle=False):
        self.check()
        for i in range(len(self.map)):
            for j in range(len(self.map[0])):
                if turtle and i == self.x and j == self.y:
                    print('üê¢', end=' ') # –ß–µ—Ä–µ–ø–∞—Ö–∞
                elif i == 0 or j == 0 or i == len(self.map) - 1 or j == len(self.map[0]) - 1:
                    if self.map[i][j] == "*":
                        print('‚¨õ', end=' ') # –û–≥—Ä–∞–¥–∞
                    else:
                        print('‚úÖ', end=' ') # –í—ã—Ö–æ–¥
                elif self.map[i][j] == ' ':
                    print('üü©', end=' ') # –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
                else:
                    print('‚¨õ', end=' ') # –°—Ç–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
            print()

    def get_exit_coord(self):
        ext = []
        for i in range(len(self.map)):
            if self.map[i][0] == ' ':
                ext.append(i)
                ext.append(0)
                break
            elif self.map[i][-1] == ' ':
                ext.append(i)
                ext.append(len(self.map[i]) - 1)
                break
        if ' ' in self.map[0]:
            ext.append(0)
            ext.append(self.map[0].index(' '))
        elif ' ' in self.map[-1]:
            ext.append(len(self.map))
            ext.append(self.map[-1].index(' '))
        if len(ext) == 0:
            print("–Ω–µ—Ç –≤—ã—Ö–æ–¥–∞")
            return
        m = 10000
        x = ext[0]
        y = ext[1]
        self.voln( self.x, self.y, 1 )
        for i in range(0, len(ext)-2, 2):
            if self.work_map[ext[i]][ext[i + 1]] < m:
                m = self.work_map[ext[i]][ext[i + 1]]
                x = ext[i]
                y = ext[i+1]
        return x, y

    def voln(self, x, y, cur=1):
        if not self.x:
            return
        self.work_map[x][y] = cur
        n = len(self.work_map)
        m = len(self.work_map[0])
        if y + 1 < m:
            if self.work_map[x][y + 1] == 0 or (self.work_map[x][y + 1] != -1 and self.work_map[x][y + 1] > cur):
                self.voln(x, y + 1, cur + 1)
        if x + 1 < n:
            if self.work_map[x + 1][y] == 0 or (self.work_map[x + 1][y] != -1 and self.work_map[x + 1][y] > cur):
                self.voln(x + 1, y, cur + 1)
        if x - 1 >= 0:
            if self.work_map[x - 1][y] == 0 or (self.work_map[x - 1][y] != -1 and self.work_map[x - 1][y] > cur):
                self.voln(x - 1, y, cur + 1)
        if y - 1 >= 0:
            if self.work_map[x][y - 1] == 0 or (self.work_map[x][y - 1] != -1 and self.work_map[x][y - 1] > cur):
                self.voln(x, y - 1, cur + 1)
        return self.work_map

    def exit_count_step(self):
        if not self.x:
            return

        self.check()
        ex, ey = self.get_exit_coord()
        print("\033[4m\033[36m\033[43m{}\033[0m".format(self.work_map[ex][ey] - 1))

    def get_path(self, long=False):
        if not self.x:
            return

        x, y = self.get_exit_coord()
        xm, ym = self.get_max_cell()

        path = [[x, y]]
        pathm = [[xm,ym]]

        while not [self.x, self.y] in path:
            if x > 0 and self.work_map[x - 1][y] == self.work_map[x][y] - 1 and self.map[x - 1][y] == ' ':
                path.append([x - 1, y])
                x = x - 1
            elif x < len(self.work_map) and self.work_map[x + 1][y] == self.work_map[x][y] - 1 and self.map[x + 1][
                y] == ' ':
                path.append([x + 1, y])
                x = x + 1
            elif y > 0 and self.work_map[x][y - 1] == self.work_map[x][y] - 1 and self.map[x][y - 1] == ' ':
                path.append([x, y - 1])
                y = y - 1
            elif y < len(self.work_map[0]) and self.work_map[x][y + 1] == self.work_map[x][y] - 1 and self.map[x][
                y + 1] == ' ':
                path.append([x, y + 1])
                y = y + 1
        while not [self.x, self.y] in pathm:

            if xm > 0 and self.work_map[xm - 1][ym] == self.work_map[xm][ym] - 1 and self.map[xm - 1][ym] == ' ':
                pathm.append([xm - 1, ym])
                xm = xm - 1
            elif xm < len(self.work_map) and self.work_map[xm + 1][ym] == self.work_map[xm][ym] - 1 and self.map[xm + 1][
                ym] == ' ':
                pathm.append([xm + 1, ym])
                xm = xm + 1
            elif ym > 0 and self.work_map[xm][ym - 1] == self.work_map[xm][ym] - 1 and self.map[xm][ym - 1] == ' ':
                pathm.append([xm, ym - 1])
                ym = ym - 1
            elif ym < len(self.work_map[0]) and self.work_map[xm][ym + 1] == self.work_map[xm][ym] - 1 and self.map[xm][
                ym + 1] == ' ':
                pathm.append([xm, ym + 1])
                ym = ym + 1

        if long:
            return pathm[:-1] + path
        else:
            return path

    def exit_show_step(self, long=False):
        if not self.x:
            return
        self.check()
        path = self.get_path(long=long)
        for i in range(len(self.map)):
            for j in range(len(self.map[0])):
                # if i > 0 and j == 0 or j == len(self.map[0]):
                #     print(emoji.emojize("\033[32m{}\033[0m".format('|')))
                if i == self.x and j == self.y:
                    print(emoji.emojize(":turtle:"), end=' ')               # –ß–µ—Ä–µ–ø–∞—Ö–∞
                elif [i, j] in path:
                    print("‚ùáÔ∏è", end=' ')  # –°–∏–º–≤–æ–ª —Ç—Ä–æ–µ–∫—Ç–æ—Ä–∏–∏ ‚ùáÔ∏è
                elif self.map[i][j] == ' ':
                    print('ü¶ãÔ∏è', end=' ')  # –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
                else:
                    print('üö∑', end=' ')  # –°—Ç–µ–Ω–∞
            print()

    def get_max_cell(self):
        x = y = None
        m = -1
        for i in range(len(self.work_map)):
            for j in range(len(self.work_map[0])):
                if self.work_map[i][j] > m:
                    m = self.work_map[i][j]
                    x, y = i, j
        return [x, y]

    def exit(self):
        a = "–ø–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ª–µ–≤–æ"
        b = "–ø–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ"
        c = "–≤–ø–µ—Ä—ë–¥ —à–∞–≥"
        e = "—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ—Å—å"
        d = 'u'
        self.check()
        path = list(reversed(self.get_path()))[1:]
        q = [self.x, self.y]
        for i in path:
            if i[1] > q[1] and i[0] == q[0]: # –∫–ª–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞
                if d == "u":
                    print(b)
                elif d == "d":
                    print(a)
                elif d == "l":
                    print(e)
                d = 'r'
            elif i[1] < q[1] and i[0] == q[0]:  # –∫–ª–µ—Ç–∫–∞ —Å–ª–µ–≤–∞
                if d == "u":
                    print(a)
                elif d == "d":
                    print(b)
                elif d == "r":
                    print(e)
                d = 'l'
            elif i[1] == q[1] and i[0] < q[0]:  # –∫–ª–µ—Ç–∫–∞ —Å–ª–µ–≤–∞
                if d == "l":
                    print(b)
                elif d == "d":
                    print(e)
                elif d == "r":
                    print(a)
                d = 'u'
            elif i[1] == q[1] and i[0] > q[0]:  # –∫–ª–µ—Ç–∫–∞ —Å–ª–µ–≤–∞
                if d == "l":
                    print(a)
                elif d == "u":
                    print(e)
                elif d == "r":
                    print(b)
                d = 'd'
            print(c)
            q = i

a = LabirintTurtle()
a.load_map('l200.txt')
# a.load_map('hard_test1.txt')
# a.show_map(turtle=True)
# print(*a.work_map,sep='\n')
# a.exit_count_step()
# a.check_map()
# print(*a.work_map, sep='\n')
# print(a.get_max_cell())
a.exit_show_step() # long = True
# print(a.get_path(long=True))
# a.exit()
